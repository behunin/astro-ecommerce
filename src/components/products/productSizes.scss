.switch-group {
    /* inline layout with minor space between */
    display: flex;
    gap: 0.25rem;

    /* defensive against flex/grid stretching */
    max-inline-size: max-content;

    /* card surface should sit above background */
    background: rgba(128, 128, 128, 0.253);
    padding: 0.25rem;
    border-radius: 0.5rem;
    box-shadow: 2px 2px 2px 1px gray;

    /* remove fieldset border */
    border: none;

    /* animate box-shadow as it changes */
    transition: box-shadow .5s ease-in-out;

    /* change box-shadow when focus is inside */
    &:is(:focus-within, :hover) {
        box-shadow: inset 3px 3px gray;
    }

    /* legend is useful to AT's but not our visible UI */
    &>legend {
        visibility: hidden;
        block-size: 0;
    }
}

.group-switch {
    /* single cell grid, prepare for the pile */
    display: grid;
    place-items: center;
    padding: 0.25rem;

    /* sets width */
    inline-size: 3rem;

    /* soft corner */
    /* is considerate of being a nested radius */
    /* https://codepen.io/BrianCross/pen/KKmgmXb */
    border-radius: calc(0.25rem * .5);

    @media (prefers-reduced-motion) {
        transition:
            outline-offset .3s ease,
            background-color .3s ease;
    }

    /* when not pressed via keyboard */
    /* has the side effect of creating an animation */
    /* because :active will be 0 offset */
    &:not(:has(:active)) {
        outline-offset: 2px;
    }

    /* if focus is showing and there's focus within */
    /* provide a nice outline style */
    &:has(:focus-visible):focus-within {
        outline: 1px solid blue;
    }

    /* if the radio inside is checked */
    /* this switch is selected */
    &:has(:checked) {
        color: white;
    }

    &:checked>p {
        color: white;
    }

    /* stylish hover/selected background */
    &:has(:checked),
    &:hover {
        background: gray;
    }

    /* all direct children pile into the single grid cell */
    &> :is(input, label, p) {
        grid-area: 1/1;
        inline-size: 100%;
        block-size: 100%;
    }

    /* and dont just grow to fit, but max the size to fit */
    /* if not the SVG icon */
    /* content is there and interactive, just not visible */
    &> :is(input, label) {
        opacity: 0;
        overflow: hidden;
        white-space: nowrap;
    }

    /* icon color to follow the text color set on the switch parent */
    &>p {
        fill: currentColor;
        text-align: center;
    }
}